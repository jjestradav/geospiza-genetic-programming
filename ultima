#lang racket
(require framework)
(require plot)

;;Dominio: un numero n
;;Codominio: devuelve un numero random entre 1 y n
(define random-op
  (lambda ()
  (list-ref '(+ - / * expt log) (random 6))))


;;Dominio: arboles binarios de expresion y numeros a b
;;Codominio: expresion evaluada con a b
(define evalua
  (lambda (L a b)
    (eval (list (cons 'lambda (cons '(x y) (list L))) a b))))

;; Dominio: vacio
;; Codominio: x y o un numero natural entre 0 y 1000000
(define xynum
  (lambda ()
    (cond ((= (random 2) 0) 'x)
          ((= (random 2) 1)  'y)
          (else (random 10)))))

; Dominio: vacio
; Codominio: booleano de si el ramdon es menor que 50
(define es-hoja?
  (lambda ()
    (< (random 100) 50 )))


;dominio: vacio
;codominio: de forma aleatorio se forma un arbol de expresion 
(define arbolaleatorio
  (lambda()
    (list (random-op) (arbol2) (arbol2))))


(define arbol2
  (lambda()
    (cond ((es-hoja?) (xynum))
          (else (arbolaleatorio)))))

;Dominio: recibe un numero entero mayor que cero
;Codominio: lista con poblacion inicial (arboles de expresion)
(define poblacion
  (lambda (n)
    (cond ((= n 1) (list(arbolaleatorio)))
          ((append (list(arbolaleatorio)) (poblacion (- n 1)))))))

(define inicial
  (lambda (n)
    (cond ((zero? n) '())
          (else
          (cons(arbolaleatorio) (poblacion (- n 1)))))))


;;(let ((p (open-input-file "f1.txt")))
;;  (let f ((x (read p)))
;;    (if (eof-object? x)
;;        (begin
;;          (close-input-port p)
;;          '())
;;        (cons x (f (read p))))))



;;Dominio: archivo con los puntos  x 
;;Codominio: lista con los puntos x del archivo
(define fx
 (call-with-input-file "f1_x.txt"
  (lambda (p)
    (let f ((x (read p)))
      (if (eof-object? x )
          '()
          (cons x (f (read p))))))))

;;Dominio: archivo con los puntos  y 
;;Codominio: lista con los puntos y del archivo
(define fy
 (call-with-input-file "f1_y.txt"
  (lambda (p)
    (let f ((x (read p)))
      (if (eof-object? x )
          '()
          (cons x (f (read p))))))))

;;Dominio: archivo con los puntos  z 
;;Codominio: lista con los puntos z del archivo
(define fz
 (call-with-input-file "f1_z.txt"
  (lambda (p)
    (let f ((x (read p)))
      (if (eof-object? x )
          '()
          (cons x (f (read p))))))))


;Dominio: 2 arboles de expresion
;Codominio: el cruce de los 2 arboles
(define cruce
  (lambda (arbol1 arbol2)
    (cond ((null? arbol1) arbol2)
          ((null? arbol2) arbol1)
          ((mutacion?) (list (car arbol1)
                             (arbolaleatorio)
                             (caddr arbol2)))
          (else (list (car arbol1)
                      (cadr arbol1)
                      (caddr arbol2))))))

;Dominio: vacio
;Codominio: posibilidad de que haya mutacion menor que 5%
(define mutacion?
  (lambda ()
    (< (random 100) 5)))


;; Dominio: Lista con poblacion (arboles de expresion) y dos puntos pertenecientes al eje x y eje y
;; Codominio: Lista que contiene los arboles de expresion evaluados
(define eval-poblacion
  (lambda (poblacion x y)
    (map (lambda (n)
           (with-handlers ([exn:fail:contract:divide-by-zero?
                            (lambda (exn) (random 100000))])
             (evalua n x y))) poblacion)))

;; Dominio: Lista que contiene los arboles de expresion evaluados y el resultado al cual se debe aproximar una funcion
;; Codominio: Lista que contiene la diferencia del resultado a aproximar con cada elemento evaluado de la poblacion
(define dif-puntos
  (lambda (L z)
    (map (lambda (zn) (abs (- z zn))) L)))

;; Dominio: Lista con poblacion (arboles de expresion)
;; Codominio: Matriz que contiene la poblacion evaluada con varios puntos a aproximar
(define f1
  (lambda (poblacion)
    (map (lambda (x y z) (dif-puntos(eval-poblacion poblacion x y) z)) fx fy fz)))

;; Dominio: Matrices
;; Codominio: La transpuesta de la preimagen (otra matriz)
(define transpuesta
  (lambda (mat)
    (cond ((null? mat) '())
          ((null? (car mat)) '())
          (else (cons (map car mat)
                      (transpuesta (map cdr mat)))))))

;; Dominio: Lista con poblacion (arboles de expresion)
;; Codominio: Lista que contiene la suma de la funciones iguales que intentaron aproximarse
(define f2
  (lambda (poblacion)
    (map (lambda (n) (round n)) (map (lambda (n) (apply + n)) (transpuesta(f1 poblacion))))))

;; Dominio: Lista con poblacion (arboles de expresion), Lista que contiene la probabilidad de cada individuo para cruzarse y un acumulado
;; Codominio: Matriz que contiene los individuos junto a su proporcion para ser escogido 
(define armar-ruleta
  (lambda (poblacion probas n)
    (cond ((null? poblacion) '())
          ((null? (cdr probas)) (list(list (car poblacion) (+ n (car probas)))))
          (else (cons (list (car poblacion) (+ n (car probas))) (armar-ruleta (cdr poblacion) (cdr probas) (+ n (car probas))))))))

;; Dominio: Lista con la suma de la funciones iguales que intentaron aproximarse
;; Codominio: Lista que contiene la probabilidad de cada individuo para cruzarse
(define eval-probas
  (lambda (evaluados)
    (map (lambda (n) (* 10 (- 1 (/ n (apply + evaluados))))) evaluados)))

;; Dominio: Lista con poblacion (arboles de expresion) y lista con la suma de la funciones iguales que intentaron aproximarse
;; Codominio: Matriz que contiene los individuos junto a su proporcion para ser escogido
(define ruleta
  (lambda (poblacion evaluados)
    (armar-ruleta poblacion (eval-probas evaluados) 0)))

;; Dominio: Lista con poblacion (arboles de expresion)
;; Codominio: Matriz que contiene los individuos junto a su proporcion para ser escogido
(define w-ruleta
  (lambda (poblacion)
    (ruleta poblacion (f2 poblacion))))

;; Dominio: Matriz que contiene los individuos junto a su proporcion para ser escogido y numero random
;; Codominio: Un individuo de la poblacion
(define seleccion
  (lambda (ruleta random)
    (cond ((< random (car(cdar ruleta))) (caar ruleta))
          (else (seleccion (cdr ruleta) random)))))

;; Dominio: Lista con poblacion (arboles de expresion)
;; Codominio: Un individuo aleatorio de la poblacion
(define w-seleccion
  (lambda (poblacion)
    (seleccion (w-ruleta poblacion) (random (* 10 (- (length poblacion) 1))))))

;; Dominio: Lista con poblacion (arboles de expresion) y la cantidad de elementos de la poblacion
;; Codominio: Lista con la nueva poblacion (arboles de expresion)
(define cruzamiento
  (lambda (poblacion tam)
    (cond ((equal? 0 tam) '())
    (else (append (list (cruce (w-seleccion poblacion) (w-seleccion poblacion))) (cruzamiento poblacion (- tam 1)))))))

;; Dominio:
;; Codominio:
(define find-best
  (lambda (ruleta best puntaje diferencia)
    (cond ((null? ruleta) best)
          ((> (- (cdar ruleta) diferencia) puntaje) (find-best (cdr ruleta) (caar ruleta) (- (cdar ruleta) diferencia) (cdar ruleta)))
          (else (find-best (cdr ruleta) best puntaje (cdar ruleta))))))

;; Dominio:
;; Codominio:
(define infinito
  (lambda (poblacion)
    (infinito(w-ruleta (cruzamiento poblacion (length poblacion))))))

;Dominio: arboles binarios de expresion
;COdominio: prepara la expresion para graficar
(define prepara
  (lambda (arbol)
    (list (cons 'lambda (cons '(x y) (list arbol))))))


(define graficar
  (lambda (arbol xs ys zs)
    (define exp (car (prepara arbol)))
    (plot3d (list (surface3d  (eval exp)  (- 100) 100 (- 100) 100)
                  (points3d (map vector xs ys zs) #:color 3 #:sym 'fullcircle5)))))
        